syntax = "proto3";

package librarypb;

option go_package = "github.com/Nicolai.mordrup/library/librarypb;librarypb";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

message Book {
    // Immutable. Required. The id for the book.
    string name = 1;

    // Required. Book title
    string title = 2;

    // Output only. The time of creation of book instance
    google.protobuf.Timestamp create_time = 3;

	// Output only. The time of update for book instance
    google.protobuf.Timestamp update_time = 4;

    // publisher of the book
    string publisher = 5;

    // Required. Embedded author struct
    Author author = 6;
}

message Author {
    // Required. first name of the author
    string first_name = 1;

    // Required. last name of the author
    string last_name = 2;
}


message CreateBookRequest{
    Book book = 1;
}

message GetBookRequest{
    // Book name in the format 'books/{isbn}'
    string name = 1;
}

message UpdateBookRequest{
    // Book name in the form 'books/{isbn}'
    string name = 1;
    Book book = 2;
}

message DeleteBookRequest{
    // Book name in the format 'books/{isbn}'
    string name = 1;
}

message DeleteBookResponse{
    Book book = 1;
}

message ListBooksRequest{}

message ListBooksResponse{
    repeated Book book = 1;
}


service LibraryService{
    rpc CreateBook (CreateBookRequest) returns (Book) {
        option (google.api.http) = {
            post: "/books"
            body: "book"
        };
    }

    rpc GetBook (GetBookRequest) returns (Book) {
        option (google.api.http) = {
            get: "/{name=books/*}"
        };
    }

    rpc UpdateBook (UpdateBookRequest) returns (Book) {
        option (google.api.http) = {
            put: "/{name=books/*}"
            body: "book"
        };
    }

    rpc DeleteBook (DeleteBookRequest) returns (Book) {
        option (google.api.http) = {
            delete: "/{name=books/*}"
        };
    }

    rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {
        option (google.api.http) = {
            get: "/books"
        };
    }
}